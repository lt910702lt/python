1. 内容回顾
    1. 组件
        1. 一小段HTML代码段 引用这个模板
        2. 引用该文件{% include 'base.html' %}

    2.静态文件相关
        1. {% load static %}
        2. {% static '相对路径' %}
        3. {% get_static_prefix %}  -- 仅仅拿到别名，需要手动拼接

    3. 自定义simple_tag 和 inclusion_tag


    4. CBV
        from django.views import View

        class AddPress(View):

            def dispatch(self,request,*args,**kwargs):
                ret = super().dispatch(request,*args,**kwargs)
                return ret

            def get(self,request,*args,**kwargs):
                pass

            def post(self,request,*args,**kwargs):
                pass

        使用：
            url(r'^add_press/',views.AddPress.as_view()),

    5. CBV流程
        1. views.AddPress.as_view()  --》 view函数
        2. 请求到来的时候，执行view
            1. 实例化AddPress  --》 赋值给self
                self.request = request
            2. 执行self.dispatch方法    如果AddPress定义，执行自己的；没有定义，执行View的
                1. 请求方式的判断  http_method_names = []
                    1. 允许请求
                        通过反射获取到对应请求的方法 --》handler
                    2. 不允许
                        http_method_not_allowed  --》 handler
                    3. handler(request,*args,**kwargs)  --》 返回HTTPresponse对象
    6. 加装饰器
        FBV 普通加法
            @wrapper
            def test()
        CBV
            from django.utils.decorators import method_decorator
            1. 加在方法上
                @method_decorator(timer)
                def get(self,request)
            2. 加在dispath上
                @method_decorator(timer)
                def dispatch(self,request,*args,**kwargs)
            3. 加在类上
                @method_decorator(timer,name='post')
                @method_decorator(timer,name='get')
                class AddPress(View):
    7. request
        request.method  POST GET PUT DELETE OPTION
        request.GET     ?id=11&name=sss     {}
        request.POST
        request.body
        request.FILES   enctype = 'mutlipart/form-data'
        request.path_info   url 不包括域名端口和uri参数

        request.get_host()          域名和端口
        request.get_full_path()     包括参数
    8. response
        HttpResponse('ok')
        render(request,'index.html',{参数})   --》完整的页面
        redirect('/press_list/')              --》Location: /press_list/
        JsonResponse({})            Content-Type: application/json

2. 今日内容
	1. url命名和反向解析
		1. 命名
			# url(r'^press_list/$', views.press_list,name='press_list'),
			url(r'^pre/$', views.press_list,name='press_list'),

			分组：
			url(r'^home/([0-9]{4})/([0-9]{2})/$', views.home,name='home'),


			命名分组：
			 url(r'^home/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.home,name='home'),

		2. 反向解析
			1. 在视图中应用
				from django.urls import  reverse

				reverse('press_list')   ——》 '/press_list/'   '/pre/'


				分组：
				reverse('home',args=('2008','09'))    ——》'/app01/home/2008/09/'

				命名分组：
				reverse('home',args=('2008','09'))    ——》'/app01/home/2008/09/'
				reverse('home',kwargs={'year':'2018','month':'10'})

			2. 在模板中的应用

				{% url 'press_list' %}  ——》  '/press_list/'  '/pre/'

				分组：
				{% url 'home' '2009' '10' %}   ——》'/app01/home/2008/10/'

				命名分组：
				{% url 'home' '2008' '10' %}   ——》'/app01/home/2008/10/'
				{% url 'home' month='10'  year='2018' %}   ——》'/app01/home/2018/10/'

	2. namespace
		url(r'app02/', include('app02.urls',namespace='app02')),
		url(r'app01/',include('app01.urls',namespace='app01')),

		reverse('app01:home',kwargs={'year':'2018','month':'10'})
		reverse('app02:home',kwargs={'year':'2018','month':'10'})


		{% url 'app02:home' '2018' '10'  %}