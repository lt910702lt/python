# 模块 ******
# 什么是模块
# 为什么要用模块
# 模块分为哪几种
# 怎么用模块
# import
    # import的时候，发生了什么
    # 在import的时候，命名空间的变化
    # 重命名
    # 一行导入多个模块
# from ... import ...
    # from import的时候，发生了什么
    # from import的时候，命名空间的变化
    # 重命名
    # 一行导入多个...
    # * 和 __all__的相关性

# 模块相关的其他知识
    # 1. 把模块当作一个脚本执行：从本模块中反射本模块的变量
    # if __name__ == '__main__':
        # 所有不需要调用就能执行的内容
    # import sys
    # getattr(sys.modules[__main__],'要反射的变量名')
    # 2. 模块搜索路径 sys.path
    # 3. pyc编译文件
    # 4. 重新加载模块
        # 已导入的模块即便在修改程序执行过程中也不会生效
    # 5. 模块的循环引用会报错


# 包 ***
# 什么是包？
    # 集合了一组py文件，提供了一组复杂的功能
# 为什么要有包？
    # 当提供的功能比较复杂，一个py文件写不下的时候
# 包里有什么?
    # 至少有一个__init__.py


# 简单的导入 平时用到
# 直接导入模块
    # import 包.包.模块
    # 包.包.模块.变量
    # from 包.包 import 模块    #推荐
    # 模块.变量


# 复杂的导入 读框架源码的时候要用
    # 绝对导入
    # 相对导入
        # 使用相对导入的模块，只能当作模块执行，不能当作脚本执行