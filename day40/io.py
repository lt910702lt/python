'''
阻塞：
    input
    recv
socket:
    设置setblocking = False时，recv不阻塞，只是会报错而已

同步：干完一件事，再干另外一件事
异步：同时处理多个任务

阻塞I/O模型（recv）：
    1、想从网络上获取数据，将请求发送给操作系统
    2、没有数 -- 等待
    3、数据到达操作系统 -- 等待
    4、数据从操作系统copy到进程
    5、程序拿到数据
    6、结束阻塞，继续执行其他代码
    缺点：一致等待，浪费时间

非阻塞I/O模型(recv):
    1、请求操作系统数据 -- 没有数据 -- 做其他事情
    2、请求操作系统数据 -- 没有数据 -- 做其他事情
    3、请求操作系统数据 -- 有数据 -- 将数据copy到进程
    4、程序拿到数据
    缺点：一直询问，CPU压力大

I/O多路复用(select，这个模型可以监听一个socket对象):
    1、操作系统进行I/O多路复用的机制 -- 我需要数据
    2、操作系统帮你监听这些sk conn
    3、有数据来了 -- 通知程序 -- 执行recv
    4、回复操作系统，可以copy data了
    5、将数据从操作系统copy到进程
    6、程序获得数据
    7、执行其他任务
    优点：在有多个对象需要I/O阻塞时，能够有效的减少阻塞带来的时间损耗，且能够在一定程度上减少CPU的负担

异步I/O（asyncio）:
    缺点：python支持的局限性，自己实现不了

'''